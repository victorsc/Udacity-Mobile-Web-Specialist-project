{"version":3,"sources":["lazy_loading.js","indexeddb.js","swloader.js","idb.js","dbhelper.js","restaurant_info.js"],"names":["lazyLoad","lazy","document","getElementsByClassName","i","length","isInViewport","hasAttribute","src","getAttribute","registerListener","event","func","window","addEventListener","attachEvent","el","rect","getBoundingClientRect","bottom","right","top","innerHeight","documentElement","clientHeight","left","innerWidth","clientWidth","createDB","idb","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","createIndex","unique","navigator","serviceWorker","register","scope","then","registration","console","log","catch","error","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","objectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","call","callback","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","name","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default","self","restaurantDb","saveRestaurantsDataLocally","restaurants","tx","all","map","restaurant","put","abort","Error","saveReviewsDataLocally","reviews","review","getLocalRestaurantsData","getLocalReviewsData","id","DBHelper","fetch","DATABASE_URL","response","json","err","offlineData","data","headers","Headers","Content-Type","body","JSON","stringify","ok","statusText","text","favorite","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","suffix","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","initMap","fetchRestaurantFromURL","Map","getElementById","zoom","center","scrollwheel","fillBreadcrumb","mapMarkerForRestaurant","parseInt","getParameterByName","fetchRestaurantById","fillRestaurantHTML","getReviewsForRestaurant","fillReviewsHTML","innerHTML","button","is_favorite","setAttribute","style","color","address","image","className","imageUrlForRestaurant","alt","operating_hours","fillRestaurantHoursHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","container","noReviews","ul","createReviewHTML","li","date","Date","createdAt","toLocaleDateString","rating","comments","breadcrumb","location","href","RegExp","exec","decodeURIComponent","toggleFavorite","target"],"mappings":"aACA,SAASA,WAGL,IAFA,IAAIC,EAAOC,SAASC,uBAAuB,kBAEnCC,EAAE,EAAGA,EAAEH,EAAKI,OAAQD,IACrBE,aAAaL,EAAKG,KAAOH,EAAKG,GAAGG,aAAa,cAC7CN,EAAKG,GAAGI,IAAMP,EAAKG,GAAGK,aAAa,aAK/C,SAASC,iBAAiBC,EAAOC,GACzBC,OAAOC,iBACPD,OAAOC,iBAAiBH,EAAOC,GAE/BC,OAAOE,YAAY,KAAOJ,EAAOC,GAIzC,SAASN,aAAaU,GAClB,IAAIC,EAAOD,EAAGE,wBAEd,OACmB,GAAfD,EAAKE,QACS,GAAdF,EAAKG,OAELH,EAAKI,MACDR,OAAOS,aACPpB,SAASqB,gBAAgBC,eAE7BP,EAAKQ,OACDZ,OAAOa,YACPxB,SAASqB,gBAAgBI,aC/BrC,SAASC,WACP,OAAOC,IAAIC,KAAK,iBAAkB,EAAG,SAASC,IACvCA,EAAUC,iBAAiBC,SAAS,gBACvCF,EAAUG,kBAAkB,cAAe,CAACC,QAAS,OAElDJ,EAAUC,iBAAiBC,SAAS,aACrBF,EAAUG,kBAAkB,UAAW,CAACC,QAAS,KAAMC,eAAe,IAC9EC,YAAY,gBAAiB,gBAAiB,CAACC,QAAQ,MCRvEpC,SAASY,iBAAiB,mBAAoB,WACtCyB,UAAUC,eAEdD,UAAUC,cAAcC,SAAS,SAAU,CAACC,MAAO,MAAMC,KAAK,SAASC,GACnEC,QAAQC,IAAI,yCAA0CF,KACvDG,MAAM,SAASC,GACdH,QAAQC,IAAI,sCAAuCE,OF8B3DtC,iBAAiB,OAAQV,UACzBU,iBAAiB,SAAUV,UGnC1B,WAKC,SAASiD,EAAiBC,GACxB,OAAO,IAAIC,QAAQ,SAASC,EAASC,GACnCH,EAAQI,UAAY,WAClBF,EAAQF,EAAQK,SAGlBL,EAAQM,QAAU,WAChBH,EAAOH,EAAQF,UAKrB,SAASS,EAAqBC,EAAKC,EAAQC,GACzC,IAAIV,EACAW,EAAI,IAAIV,QAAQ,SAASC,EAASC,GAEpCJ,EADAC,EAAUQ,EAAIC,GAAQG,MAAMJ,EAAKE,IACPjB,KAAKS,EAASC,KAI1C,OADAQ,EAAEX,QAAUA,EACLW,EAWT,SAASE,EAAgBC,EAAYC,EAAYC,GAC/CA,EAAWC,QAAQ,SAASC,GAC1BC,OAAOC,eAAeN,EAAWO,UAAWH,EAAM,CAChDI,IAAK,WACH,OAAOC,KAAKR,GAAYG,IAE1BM,IAAK,SAASC,GACZF,KAAKR,GAAYG,GAAQO,OAMjC,SAASC,EAAoBZ,EAAYC,EAAYY,EAAaX,GAChEA,EAAWC,QAAQ,SAASC,GACpBA,KAAQS,EAAYN,YAC1BP,EAAWO,UAAUH,GAAQ,WAC3B,OAAOX,EAAqBgB,KAAKR,GAAaG,EAAMU,eAK1D,SAASC,EAAaf,EAAYC,EAAYY,EAAaX,GACzDA,EAAWC,QAAQ,SAASC,GACpBA,KAAQS,EAAYN,YAC1BP,EAAWO,UAAUH,GAAQ,WAC3B,OAAOK,KAAKR,GAAYG,GAAMN,MAAMW,KAAKR,GAAaa,eAK5D,SAASE,EAA0BhB,EAAYC,EAAYY,EAAaX,GACtEA,EAAWC,QAAQ,SAASC,GACpBA,KAAQS,EAAYN,YAC1BP,EAAWO,UAAUH,GAAQ,WAC3B,OA3C8BV,EA2CIe,KAAKR,IA1CvCJ,EAAIJ,EAAqBC,EA0C2BU,EAAMU,YAzCrDnC,KAAK,SAASsC,GACrB,GAAKA,EACL,OAAO,IAAIC,EAAOD,EAAOpB,EAAEX,WAJ/B,IAAoCQ,EAC9BG,MA+CN,SAASsB,EAAMC,GACbX,KAAKY,OAASD,EAuBhB,SAASF,EAAOI,EAAQpC,GACtBuB,KAAKc,QAAUD,EACfb,KAAKe,SAAWtC,EA+BlB,SAASuC,EAAYC,GACnBjB,KAAKkB,OAASD,EAuChB,SAASE,EAAYC,GACnBpB,KAAKqB,IAAMD,EACXpB,KAAKsB,SAAW,IAAI5C,QAAQ,SAASC,EAASC,GAC5CwC,EAAeG,WAAa,WAC1B5C,KAEFyC,EAAerC,QAAU,WACvBH,EAAOwC,EAAe7C,QAExB6C,EAAeI,QAAU,WACvB5C,EAAOwC,EAAe7C,UAkB5B,SAASkD,EAAUC,EAAIC,EAAYC,GACjC5B,KAAK6B,IAAMH,EACX1B,KAAK2B,WAAaA,EAClB3B,KAAK4B,YAAc,IAAIT,EAAYS,GAkBrC,SAASE,EAAGJ,GACV1B,KAAK6B,IAAMH,EA/IbpC,EAAgBoB,EAAO,SAAU,CAC/B,OACA,UACA,aACA,WAGFP,EAAoBO,EAAO,SAAUqB,SAAU,CAC7C,MACA,SACA,SACA,aACA,UAGFxB,EAA0BG,EAAO,SAAUqB,SAAU,CACnD,aACA,kBAQFzC,EAAgBmB,EAAQ,UAAW,CACjC,YACA,MACA,aACA,UAGFN,EAAoBM,EAAQ,UAAWuB,UAAW,CAChD,SACA,WAIF,CAAC,UAAW,WAAY,sBAAsBtC,QAAQ,SAASuC,GACvDA,KAAcD,UAAUlC,YAC9BW,EAAOX,UAAUmC,GAAc,WAC7B,IAAIpB,EAASb,KACTb,EAAOkB,UACX,OAAO3B,QAAQC,UAAUT,KAAK,WAE5B,OADA2C,EAAOC,QAAQmB,GAAY5C,MAAMwB,EAAOC,QAAS3B,GAC1CX,EAAiBqC,EAAOE,UAAU7C,KAAK,SAASsC,GACrD,GAAKA,EACL,OAAO,IAAIC,EAAOD,EAAOK,EAAOE,kBAUxCC,EAAYlB,UAAUlC,YAAc,WAClC,OAAO,IAAI8C,EAAMV,KAAKkB,OAAOtD,YAAYyB,MAAMW,KAAKkB,OAAQb,aAG9DW,EAAYlB,UAAUa,MAAQ,WAC5B,OAAO,IAAID,EAAMV,KAAKkB,OAAOP,MAAMtB,MAAMW,KAAKkB,OAAQb,aAGxDf,EAAgB0B,EAAa,SAAU,CACrC,OACA,UACA,aACA,kBAGFb,EAAoBa,EAAa,SAAUkB,eAAgB,CACzD,MACA,MACA,SACA,QACA,MACA,SACA,SACA,aACA,UAGF3B,EAA0BS,EAAa,SAAUkB,eAAgB,CAC/D,aACA,kBAGF5B,EAAaU,EAAa,SAAUkB,eAAgB,CAClD,gBAkBFf,EAAYrB,UAAUqC,YAAc,WAClC,OAAO,IAAInB,EAAYhB,KAAKqB,IAAIc,YAAY9C,MAAMW,KAAKqB,IAAKhB,aAG9Df,EAAgB6B,EAAa,MAAO,CAClC,mBACA,SAGFb,EAAaa,EAAa,MAAOiB,eAAgB,CAC/C,UASFX,EAAU3B,UAAUrC,kBAAoB,WACtC,OAAO,IAAIuD,EAAYhB,KAAK6B,IAAIpE,kBAAkB4B,MAAMW,KAAK6B,IAAKxB,aAGpEf,EAAgBmC,EAAW,MAAO,CAChC,OACA,UACA,qBAGFnB,EAAamB,EAAW,MAAOY,YAAa,CAC1C,oBACA,UAOFP,EAAGhC,UAAU8B,YAAc,WACzB,OAAO,IAAIT,EAAYnB,KAAK6B,IAAID,YAAYvC,MAAMW,KAAK6B,IAAKxB,aAG9Df,EAAgBwC,EAAI,MAAO,CACzB,OACA,UACA,qBAGFxB,EAAawB,EAAI,MAAOO,YAAa,CACnC,UAKF,CAAC,aAAc,iBAAiB3C,QAAQ,SAAS4C,GAC/C,CAACtB,EAAaN,GAAOhB,QAAQ,SAASU,GAE9BkC,KAAYlC,EAAYN,YAE9BM,EAAYN,UAAUwC,EAASC,QAAQ,OAAQ,YAAc,WAC3D,IAvPWC,EAuPPrD,GAvPOqD,EAuPQnC,UAtPhBoC,MAAM3C,UAAU4C,MAAMC,KAAKH,IAuP1BI,EAAWzD,EAAKA,EAAKvD,OAAS,GAC9BiH,EAAe7C,KAAKkB,QAAUlB,KAAKY,OACnCnC,EAAUoE,EAAaP,GAAUjD,MAAMwD,EAAc1D,EAAKuD,MAAM,GAAI,IACxEjE,EAAQI,UAAY,WAClB+D,EAASnE,EAAQK,eAOzB,CAAC4B,EAAOM,GAAatB,QAAQ,SAASU,GAChCA,EAAYN,UAAUgD,SAC1B1C,EAAYN,UAAUgD,OAAS,SAASC,EAAOC,GAC7C,IAAIC,EAAWjD,KACXkD,EAAQ,GAEZ,OAAO,IAAIxE,QAAQ,SAASC,GAC1BsE,EAASE,cAAcJ,EAAO,SAASlC,GAChCA,GAILqC,EAAME,KAAKvC,EAAOL,YAEJ6C,IAAVL,GAAuBE,EAAMtH,QAAUoH,EAI3CnC,EAAOyC,WAHL3E,EAAQuE,IANRvE,EAAQuE,WAelB,IAAIK,EAAM,CACRlG,KAAM,SAASmG,EAAMC,EAASC,GAC5B,IAAItE,EAAIJ,EAAqB2E,UAAW,OAAQ,CAACH,EAAMC,IACnDhF,EAAUW,EAAEX,QAUhB,OARIA,IACFA,EAAQmF,gBAAkB,SAAS1H,GAC7BwH,GACFA,EAAgB,IAAIjC,EAAUhD,EAAQK,OAAQ5C,EAAMyF,WAAYlD,EAAQmD,gBAKvExC,EAAElB,KAAK,SAASwD,GACrB,OAAO,IAAII,EAAGJ,MAGlBmC,OAAQ,SAASL,GACf,OAAOxE,EAAqB2E,UAAW,iBAAkB,CAACH,MAIxC,oBAAXM,QACTA,OAAOC,QAAUR,EACjBO,OAAOC,QAAQC,QAAUF,OAAOC,SAGhCE,KAAK7G,IAAMmG,EAvTd,GFWD,IAAMW,aAAe/G,WAErB,SAASgH,2BAA2BC,GAClC,OAAOF,aAAahG,KAAK,SAAAwD,GACvB,IAAM2C,EAAK3C,EAAGE,YAAY,cAAe,aACnCX,EAAQoD,EAAGlC,YAAY,eAC7B,OAAOzD,QAAQ4F,IAAIF,EAAYG,IAAI,SAAAC,GAAA,OAAcvD,EAAMwD,IAAID,MACxDlG,MAAM,WAEL,MADA+F,EAAGK,QACGC,MAAM,8BAKpB,SAASC,uBAAuBC,GAC9B,OAAOX,aAAahG,KAAK,SAAAwD,GACvB,IAAM2C,EAAK3C,EAAGE,YAAY,UAAW,aAC/BX,EAAQoD,EAAGlC,YAAY,WAC7B,OAAOzD,QAAQ4F,IAAIO,EAAQN,IAAI,SAAAO,GAAA,OAAU7D,EAAMwD,IAAIK,MAChDxG,MAAM,WAEL,MADA+F,EAAGK,QACGC,MAAM,0BAKpB,SAASI,0BACP,OAAOb,aAAahG,KAAK,SAAAwD,GAGvB,OAFWA,EAAGE,YAAY,cAAe,YACxBO,YAAY,eAChBW,WAIjB,SAASkC,oBAAoBC,GAC3B,OAAOf,aAAahG,KAAK,SAAAwD,GAIvB,OAHWA,EAAGE,YAAY,UAAW,YACpBO,YAAY,WACTxB,MAAM,iBACbmC,OAAOmC,yXGjDlBC,4HAcoBtC,GACtBuC,MAAMD,EAASE,aAAe,eAC3BlH,KAAK,SAAAmH,GAAA,OAAYA,EAASC,SAC1BpH,KAAK,SAAAkG,GACJD,2BAA2BC,GAC3BxB,EAAS,KAAMwB,KAEhB9F,MAAM,SAAAiH,GACLnH,QAAQC,IAAI,qEACZ0G,0BACG7G,KAAK,SAAAsH,GACCA,EAAY5J,OAGjBgH,EAAS,KAAM4C,GAFbpH,QAAQC,IAAI,uEAQO4G,EAAIrC,GACjCuC,MAAMD,EAASE,aAAe,0BAA4BH,GACvD/G,KAAK,SAAAmH,GAAA,OAAYA,EAASC,SAC1BpH,KAAK,SAAA2G,GACJD,uBAAuBC,GACvBjC,EAASiC,KAEVvG,MAAM,SAAAiH,GACLnH,QAAQC,IAAI,qEACZ2G,oBAAoBC,GAAI/G,KAAK,SAAAsH,GAC3B5C,EAAS4C,gDAOOC,GACtB,IAAMC,EAAU,IAAIC,QAAQ,CAACC,eAAgB,qBACvCC,EAAOC,KAAKC,UAAUN,GAC5B,OAAON,MAAM,iCAAkC,CAC7CjG,OAAQ,OACRwG,QAASA,EACTG,KAAMA,IAEP3H,KAAK,SAAAmH,GACJ,IAAKA,EAASW,GACZ,MAAMrB,MAAMU,EAASY,YAEvB,OAAOZ,EAASa,gDAIEjB,EAAIkB,EAAUvD,GAClC,IAAM8C,EAAU,IAAIC,QAAQ,CAACC,eAAgB,qBAC7C,OAAOT,MAAM,qCAAuCF,EAAK,gBAAkBkB,EAAU,CACnFjH,OAAQ,MACRwG,QAASA,IAEVxH,KAAK,SAAAmH,GACJ,IAAKA,EAASW,GACZ,MAAMrB,MAAMU,EAASY,YAEvBrD,kDAQuBqC,EAAIrC,GAE7BsC,EAASkB,iBAAiB,SAAC7H,EAAO6F,GAChC,GAAI7F,EACFqE,EAASrE,EAAO,UACX,CACL,IAAMiG,EAAaJ,EAAYiC,KAAK,SAAAC,GAAA,OAAKA,EAAErB,IAAMA,IAC7CT,EACF5B,EAAS,KAAM4B,GAEf5B,EAAS,4BAA6B,0DASd2D,EAAS3D,GAEvCsC,EAASkB,iBAAiB,SAAC7H,EAAO6F,GAChC,GAAI7F,EACFqE,EAASrE,EAAO,UACX,CAEL,IAAMiI,EAAUpC,EAAYqC,OAAO,SAAAH,GAAA,OAAKA,EAAEI,cAAgBH,IAC1D3D,EAAS,KAAM4D,4DAQgBG,EAAc/D,GAEjDsC,EAASkB,iBAAiB,SAAC7H,EAAO6F,GAChC,GAAI7F,EACFqE,EAASrE,EAAO,UACX,CAEL,IAAMiI,EAAUpC,EAAYqC,OAAO,SAAAH,GAAA,OAAKA,EAAEK,cAAgBA,IAC1D/D,EAAS,KAAM4D,sEAQ0BD,EAASI,EAAc/D,GAEpEsC,EAASkB,iBAAiB,SAAC7H,EAAO6F,GAChC,GAAI7F,EACFqE,EAASrE,EAAO,UACX,CACL,IAAIiI,EAAUpC,EACC,OAAXmC,IACFC,EAAUA,EAAQC,OAAO,SAAAH,GAAA,OAAKA,EAAEI,cAAgBH,KAE9B,OAAhBI,IACFH,EAAUA,EAAQC,OAAO,SAAAH,GAAA,OAAKA,EAAEK,cAAgBA,KAElD/D,EAAS,KAAM4D,iDAQK5D,GAExBsC,EAASkB,iBAAiB,SAAC7H,EAAO6F,GAChC,GAAI7F,EACFqE,EAASrE,EAAO,UACX,CAEL,IAAMqI,EAAgBxC,EAAYG,IAAI,SAACsC,EAAGlL,GAAJ,OAAUyI,EAAYzI,GAAGgL,eAEzDG,EAAsBF,EAAcH,OAAO,SAACI,EAAGlL,GAAJ,OAAUiL,EAAcG,QAAQF,IAAMlL,IACvFiH,EAAS,KAAMkE,4CAQAlE,GAEnBsC,EAASkB,iBAAiB,SAAC7H,EAAO6F,GAChC,GAAI7F,EACFqE,EAASrE,EAAO,UACX,CAEL,IAAMyI,EAAW5C,EAAYG,IAAI,SAACsC,EAAGlL,GAAJ,OAAUyI,EAAYzI,GAAG+K,eAEpDO,EAAiBD,EAASP,OAAO,SAACI,EAAGlL,GAAJ,OAAUqL,EAASD,QAAQF,IAAMlL,IACxEiH,EAAS,KAAMqE,+CAQGzC,GACtB,MAAA,wBAAgCA,EAAWS,iDAMhBT,GAA6B,IAAjB0C,EAAiB,EAAA7G,UAAAzE,aAAAyH,IAAAhD,UAAA,GAAAA,UAAA,GAAR,OAChD,MAAA,QAAgBmE,EAAWS,GAAKiC,EAAhC,sDAM4B1C,EAAYD,GAQxC,OAPe,IAAI4C,OAAOC,KAAKC,OAAO,CACpCC,SAAU9C,EAAW+C,OACrBC,MAAOhD,EAAWhB,KAClBiE,IAAKvC,EAASwC,iBAAiBlD,GAC/BD,IAAKA,EACLoD,UAAWR,OAAOC,KAAKQ,UAAUC,4CA7MnC,MAAA,kCCXArD,gBAAAA,EACAD,SAAAA,EAKJnI,OAAO0L,QAAU,WACfC,uBAAuB,SAACxJ,EAAOiG,GACzBjG,EACFH,QAAQG,MAAMA,IAEd0F,KAAKM,IAAM,IAAI4C,OAAOC,KAAKY,IAAIvM,SAASwM,eAAe,OAAQ,CAC7DC,KAAM,GACNC,OAAQ3D,EAAW+C,OACnBa,aAAa,IAEfC,iBACAnD,SAASoD,uBAAuBrE,KAAKO,WAAYP,KAAKM,SAQ5DnI,OAAO2L,uBAAyB,SAACnF,GAC/B,IAAMqC,EAAKsD,SAASC,mBAAmB,OAClCvD,GACHrC,EAAS,0BAA2B,MAElCqB,KAAKO,WACP5B,EAAS,KAAMqB,KAAKO,YAGpBU,SAASuD,oBAAoBxD,EAAI,SAAC1G,EAAOiG,IACvCP,KAAKO,WAAaA,IAKlBkE,qBACA9F,EAAS,KAAM4B,GACfU,SAASyD,wBAAwB1D,EAAI,SAACJ,GACpCZ,KAAKO,WAAWK,QAAUA,EAC1B+D,qBAPAxK,QAAQG,MAAMA,MAgBtBnC,OAAOsM,mBAAqB,WAAkC,IAAjClE,EAAiC,EAAAnE,UAAAzE,aAAAyH,IAAAhD,UAAA,GAAAA,UAAA,GAApB4D,KAAKO,WAChC/I,SAASwM,eAAe,mBAChCY,UAAYrE,EAAWhB,KAE5B,IAAMsF,EAASrN,SAASwM,eAAe,mBACT,QAA1BzD,EAAWuE,aACbD,EAAOE,aAAa,eAAgB,QACpCF,EAAOE,aAAa,aAAc,sBAClCF,EAAOG,MAAMC,MAAQ,WAErBJ,EAAOE,aAAa,eAAgB,SACpCF,EAAOE,aAAa,aAAc,oBAClCF,EAAOG,MAAMC,MAAQ,SAGPzN,SAASwM,eAAe,sBAChCY,UAAYrE,EAAW2E,QAE/B,IAAMC,EAAQ3N,SAASwM,eAAe,kBACtCmB,EAAMC,UAAY,iBAClBD,EAAMrN,IAAMmJ,SAASoE,sBAAsB9E,GAC3C4E,EAAMG,IAAM/E,EAAWhB,KAAO,WAEd/H,SAASwM,eAAe,sBAChCY,UAAYrE,EAAWkC,aAG3BlC,EAAWgF,iBACbC,2BAOJrN,OAAOqN,wBAA0B,WAAsD,IAArDC,EAAqD,EAAArJ,UAAAzE,aAAAyH,IAAAhD,UAAA,GAAAA,UAAA,GAApC4D,KAAKO,WAAWgF,gBAC3DG,EAAQlO,SAASwM,eAAe,oBACtC,IAAK,IAAI2B,KAAOF,EAAgB,CAC9B,IAAMG,EAAMpO,SAASqO,cAAc,MAE7BC,EAAMtO,SAASqO,cAAc,MACnCC,EAAIlB,UAAYe,EAChBC,EAAIG,YAAYD,GAEhB,IAAME,EAAOxO,SAASqO,cAAc,MACpCG,EAAKpB,UAAYa,EAAeE,GAChCC,EAAIG,YAAYC,GAEhBN,EAAMK,YAAYH,KAOtBzN,OAAOwM,gBAAkB,WAAuC,IAAtC/D,EAAsC,EAAAxE,UAAAzE,aAAAyH,IAAAhD,UAAA,GAAAA,UAAA,GAA5B4D,KAAKO,WAAWK,QAC5CqF,EAAYzO,SAASwM,eAAe,qBACpCT,EAAQ/L,SAASqO,cAAc,MAIrC,GAHAtC,EAAMqB,UAAY,qBAClBqB,EAAUF,YAAYxC,IAEjB3C,EAAS,CACZ,IAAMsF,EAAY1O,SAASqO,cAAc,KAGzC,OAFAK,EAAUtB,UAAY,uBACtBqB,EAAUF,YAAYG,GAGxB,IAAMC,EAAK3O,SAASwM,eAAe,gBACnCpD,EAAQnF,QAAQ,SAAAoF,GACdsF,EAAGJ,YAAYK,iBAAiBvF,MAElCoF,EAAUF,YAAYI,IAMxBhO,OAAOiO,iBAAmB,SAACvF,GACzB,IAAMwF,EAAK7O,SAASqO,cAAc,MAC5BtG,EAAO/H,SAASqO,cAAc,KACpCtG,EAAKqF,UAAY/D,EAAOtB,KACxB8G,EAAGN,YAAYxG,GAEf,IAAM+G,EAAO9O,SAASqO,cAAc,KACpCS,EAAK1B,UAAY,IAAI2B,KAAK1F,EAAO2F,WAAWC,qBAC5CJ,EAAGN,YAAYO,GAEf,IAAMI,EAASlP,SAASqO,cAAc,KACtCa,EAAO9B,UAAP,WAA8B/D,EAAO6F,OACrCL,EAAGN,YAAYW,GAEf,IAAMC,EAAWnP,SAASqO,cAAc,KAIxC,OAHAc,EAAS/B,UAAY/D,EAAO8F,SAC5BN,EAAGN,YAAYY,GAERN,GAMTlO,OAAOiM,eAAiB,WAAgC,IAA/B7D,EAA+B,EAAAnE,UAAAzE,aAAAyH,IAAAhD,UAAA,GAAAA,UAAA,GAApB4D,KAAKO,WACjCqG,EAAapP,SAASwM,eAAe,cACrCqC,EAAK7O,SAASqO,cAAc,MAClCQ,EAAGzB,UAAYrE,EAAWhB,KAC1BqH,EAAWb,YAAYM,IAMzBlO,OAAOoM,mBAAqB,SAAChF,EAAMiE,GAC5BA,IACHA,EAAMrL,OAAO0O,SAASC,MACxBvH,EAAOA,EAAKjB,QAAQ,UAAW,QAC/B,IACEiE,EADY,IAAIwE,OAAJ,OAAkBxH,EAAlB,qBACIyH,KAAKxD,GACvB,OAAKjB,EAEAA,EAAQ,GAEN0E,mBAAmB1E,EAAQ,GAAGjE,QAAQ,MAAO,MAD3C,GAFA,MAMXnG,OAAO+O,eAAiB,SAACjP,GACvB,IAAM4M,EAAS5M,EAAMkP,OACsB,SAAvCtC,EAAO9M,aAAa,gBACtBkJ,SAASiG,eAAelH,KAAKO,WAAWS,IAAI,EAAM,WAChDhB,KAAKO,WAAWuE,YAAc,OAC9BD,EAAOE,aAAa,eAAgB,QACpCF,EAAOE,aAAa,aAAc,sBAClCF,EAAOG,MAAMC,MAAQ,WAGvBhE,SAASiG,eAAelH,KAAKO,WAAWS,IAAI,EAAO,WACjDhB,KAAKO,WAAWuE,YAAc,QAC9BD,EAAOE,aAAa,eAAgB,SACpCF,EAAOE,aAAa,aAAc,oBAClCF,EAAOG,MAAMC,MAAQ","file":"restaurant.min.js","sourcesContent":["// Credits for the lazy loading mechanism go to my colleague Evgeny Kuznetsov https://github.com/Evgeny81\nfunction lazyLoad() {\n    let lazy = document.getElementsByClassName('restaurant-img');\n\n    for(let i=0; i<lazy.length; i++){\n        if(isInViewport(lazy[i]) && lazy[i].hasAttribute('data-src')){\n            lazy[i].src = lazy[i].getAttribute('data-src');\n        }\n    }\n}\n\nfunction registerListener(event, func) {\n    if (window.addEventListener) {\n        window.addEventListener(event, func)\n    } else {\n        window.attachEvent('on' + event, func)\n    }\n}\n\nfunction isInViewport(el){\n    let rect = el.getBoundingClientRect();\n\n    return (\n        rect.bottom >= 0 &&\n        rect.right >= 0 &&\n\n        rect.top <= (\n            window.innerHeight ||\n            document.documentElement.clientHeight) &&\n\n        rect.left <= (\n            window.innerWidth ||\n            document.documentElement.clientWidth)\n    );\n}\n\nregisterListener('load', lazyLoad);\nregisterListener('scroll', lazyLoad);","\nfunction createDB() {\n  return idb.open('restaurants-db', 1, function(upgradeDb) {\n    if (!upgradeDb.objectStoreNames.contains('restaurants')) {\n      upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\n    }\n    if (!upgradeDb.objectStoreNames.contains('reviews')) {\n      const reviewsOS = upgradeDb.createObjectStore('reviews', {keyPath: 'id', autoIncrement: true});\n      reviewsOS.createIndex('restaurant_id', 'restaurant_id', {unique: false});\n    }\n  });\n}\n\nconst restaurantDb = createDB();\n\nfunction saveRestaurantsDataLocally(restaurants) {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('restaurants', 'readwrite');\n    const store = tx.objectStore('restaurants');\n    return Promise.all(restaurants.map(restaurant => store.put(restaurant)))\n      .catch(() => {\n        tx.abort();\n        throw Error('Restaurants not added.');\n      });\n  });\n}\n\nfunction saveReviewsDataLocally(reviews) {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('reviews', 'readwrite');\n    const store = tx.objectStore('reviews');\n    return Promise.all(reviews.map(review => store.put(review)))\n      .catch(() => {\n        tx.abort();\n        throw Error('Reviews not added.');\n      });\n  });\n}\n\nfunction getLocalRestaurantsData() {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('restaurants', 'readonly');\n    const store = tx.objectStore('restaurants');\n    return store.getAll();\n  });\n}\n\nfunction getLocalReviewsData(id) {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('reviews', 'readonly');\n    const store = tx.objectStore('reviews');\n    const index = store.index('restaurant_id');\n    return index.getAll(id);\n  });\n}\n","document.addEventListener('DOMContentLoaded', () => {\n    if(!navigator.serviceWorker) return;\n\n    navigator.serviceWorker.register('/sw.js', {scope: '/'}).then(function(registration) {\n        console.log('Service worker registration succeeded:', registration);\n    }).catch(function(error) {\n        console.log('Service worker registration failed:', error);\n    });\n});","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","/**\n * Common database helper functions.\n */\nclass DBHelper {\n\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   */\n  static get DATABASE_URL() {\n    const port = 1337 // Change this to your server port\n    return `http://localhost:${port}/`;\n  }\n\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    fetch(DBHelper.DATABASE_URL + 'restaurants')\n      .then(response => response.json())\n      .then(restaurants => {\n        saveRestaurantsDataLocally(restaurants);\n        callback(null, restaurants);\n      })\n      .catch(err => {\n        console.log('[DEBUG] Network requests have failed, this is expected if offline');\n        getLocalRestaurantsData()\n          .then(offlineData => {\n            if (!offlineData.length) {\n              console.log(\"no offline data\");\n            } else {\n            callback(null, offlineData);\n          }\n        });\n      });\n  }\n\n  static getReviewsForRestaurant(id, callback) {\n    fetch(DBHelper.DATABASE_URL + 'reviews/?restaurant_id=' + id)\n      .then(response => response.json())\n      .then(reviews => {\n        saveReviewsDataLocally(reviews);\n        callback(reviews);\n      })\n      .catch(err => {\n        console.log('[DEBUG] Network requests have failed, this is expected if offline');\n        getLocalReviewsData(id).then(offlineData => {\n          callback(offlineData);\n        });\n      });\n  }\n  /**\n   * add a review\n   */\n  static reviewRestaurant(data) {\n    const headers = new Headers({'Content-Type': 'application/json'});\n    const body = JSON.stringify(data);\n    return fetch('http://localhost:1337/reviews/', {\n      method: 'POST',\n      headers: headers,\n      body: body\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response.text();\n    });\n  }\n\n  static toggleFavorite(id, favorite, callback) {\n    const headers = new Headers({'Content-Type': 'application/json'});\n    return fetch('http://localhost:1337/restaurants/' + id + '?is_favorite=' + favorite, {\n      method: 'PUT',\n      headers: headers\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      callback();\n    });\n  }\n\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        const restaurant = restaurants.find(r => r.id == id);\n        if (restaurant) { // Got the restaurant\n          callback(null, restaurant);\n        } else { // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants\n        if (cuisine != 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(restaurant, suffix = '_800') {\n    return (`/img/${restaurant.id}${suffix}.jpg`);\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP}\n    );\n    return marker;\n  }\n\n}\n","let restaurant;\nlet map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nwindow.fetchRestaurantFromURL = (callback) => {\n  const id = parseInt(getParameterByName('id'));\n  if (!id) { // no id found in URL\n    callback('No restaurant id in URL', null);\n  }\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant);\n      DBHelper.getReviewsForRestaurant(id, (reviews) => {\n        self.restaurant.reviews = reviews;\n        fillReviewsHTML();\n      });\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nwindow.fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const button = document.getElementById('favorite-button');\n  if (restaurant.is_favorite == 'true') {\n    button.setAttribute('aria-pressed', 'true');\n    button.setAttribute('aria-label', 'Unmark as favorite');\n    button.style.color = 'orange';\n  } else {\n    button.setAttribute('aria-pressed', 'false');\n    button.setAttribute('aria-label', 'Mark as favorite');\n    button.style.color = 'black';\n  }\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = restaurant.name + \" picture\";\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nwindow.fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nwindow.fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Restaurant reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nwindow.createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.createdAt).toLocaleDateString();\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nwindow.fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nwindow.getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\nwindow.toggleFavorite = (event) => {\n  const button = event.target;\n  if (button.getAttribute('aria-pressed') == 'false') {\n    DBHelper.toggleFavorite(self.restaurant.id, true, () => {\n      self.restaurant.is_favorite = 'true';\n      button.setAttribute('aria-pressed', 'true');\n      button.setAttribute('aria-label', 'Unmark as favorite');\n      button.style.color = 'orange';\n    });\n  } else {\n    DBHelper.toggleFavorite(self.restaurant.id, false, () => {\n      self.restaurant.is_favorite = 'false';\n      button.setAttribute('aria-pressed', 'false');\n      button.setAttribute('aria-label', 'Mark as favorite');\n      button.style.color = 'black';\n    });\n  }\n}\n"]}