{"version":3,"sources":["lazy_loading.js","indexeddb.js","idb.js","restaurant_info.js","dbhelper.js"],"names":["lazyLoad","lazy","document","getElementsByClassName","i","length","isInViewport","hasAttribute","src","getAttribute","registerListener","event","func","window","addEventListener","attachEvent","el","rect","getBoundingClientRect","bottom","right","top","innerHeight","documentElement","clientHeight","left","innerWidth","clientWidth","createDB","idb","open","upgradeDb","oldVersion","objectStoreNames","contains","createObjectStore","keyPath","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","call","callback","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","name","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default","self","restaurantDb","saveRestaurantsDataLocally","restaurants","tx","all","map","restaurant","put","catch","abort","Error","getLocalRestaurantsData","DBHelper","fetch","DATABASE_URL","response","json","err","console","log","offlineData","id","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","suffix","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","initMap","fetchRestaurantFromURL","Map","getElementById","zoom","center","scrollwheel","fillBreadcrumb","mapMarkerForRestaurant","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","address","image","className","imageUrlForRestaurant","alt","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","noReviews","ul","review","createReviewHTML","li","date","rating","comments","breadcrumb","location","href","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"restaurant.min.js","sourcesContent":["function lazyLoad() {\n    let lazy = document.getElementsByClassName('restaurant-img');\n\n    for(let i=0; i<lazy.length; i++){\n        if(isInViewport(lazy[i]) && lazy[i].hasAttribute('data-src')){\n            lazy[i].src = lazy[i].getAttribute('data-src');\n        }\n    }\n}\n\nfunction registerListener(event, func) {\n    if (window.addEventListener) {\n        window.addEventListener(event, func)\n    } else {\n        window.attachEvent('on' + event, func)\n    }\n}\n\nfunction isInViewport(el){\n    let rect = el.getBoundingClientRect();\n\n    return (\n        rect.bottom >= 0 &&\n        rect.right >= 0 &&\n\n        rect.top <= (\n            window.innerHeight ||\n            document.documentElement.clientHeight) &&\n\n        rect.left <= (\n            window.innerWidth ||\n            document.documentElement.clientWidth)\n    );\n}\n\nregisterListener('load', lazyLoad);\nregisterListener('scroll', lazyLoad);","\nfunction createDB() {\n  return idb.open('restaurants-db', 2, function(upgradeDb) {\n    switch (upgradeDb.oldVersion) {\n      case 0:\n        // backup\n      case 1:\n        if (!upgradeDb.objectStoreNames.contains('restaurants')) {\n          upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\n        }\n    }\n  });\n}\n\nconst restaurantDb = createDB();\n\nfunction saveRestaurantsDataLocally(restaurants) {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('restaurants', 'readwrite');\n    const store = tx.objectStore('restaurants');\n    return Promise.all(restaurants.map(restaurant => store.put(restaurant)))\n      .catch(() => {\n        tx.abort();\n        throw Error('Restaurants not added.');\n      });\n  });\n}\n\nfunction getLocalRestaurantsData() {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('restaurants', 'readonly');\n    const store = tx.objectStore('restaurants');\n    return store.getAll();\n  });\n}\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nwindow.fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    callback('No restaurant id in URL', null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nwindow.fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = restaurant.name + \" picture\";\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nwindow.fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nwindow.fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Restaurant reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nwindow.createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nwindow.fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nwindow.getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n","/**\n * Common database helper functions.\n */\nclass DBHelper {\n\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   */\n  static get DATABASE_URL() {\n    const port = 1337 // Change this to your server port\n    return `http://localhost:${port}/restaurants`;\n  }\n\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    fetch(DBHelper.DATABASE_URL)\n      .then(response => response.json())\n      .then(restaurants => {\n        saveRestaurantsDataLocally(restaurants);\n        callback(null, restaurants);\n      })\n      .catch(err => {\n        console.log('[DEBUG] Network requests have failed, this is expected if offline');\n        getLocalRestaurantsData()\n          .then(offlineData => {\n            if (!offlineData.length) {\n              console.log(\"no offline data\");\n            } else {\n            callback(null, offlineData);\n          }\n        });\n      });\n  }\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        const restaurant = restaurants.find(r => r.id == id);\n        if (restaurant) { // Got the restaurant\n          callback(null, restaurant);\n        } else { // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants\n        if (cuisine != 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(restaurant, suffix = '_800') {\n    return (`/img/${restaurant.id}${suffix}.jpg`);\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP}\n    );\n    return marker;\n  }\n\n}\n"]}