{"version":3,"sources":["lazy_loading.js","indexeddb.js","swloader.js","idb.js","dbhelper.js","main.js"],"names":["lazyLoad","lazy","document","getElementsByClassName","i","length","isInViewport","hasAttribute","src","getAttribute","registerListener","event","func","window","addEventListener","attachEvent","el","rect","getBoundingClientRect","bottom","right","top","innerHeight","documentElement","clientHeight","left","innerWidth","clientWidth","createDB","idb","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","createIndex","unique","navigator","serviceWorker","register","scope","then","registration","console","log","catch","error","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","objectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","call","callback","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","name","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default","self","restaurantDb","saveRestaurantsDataLocally","restaurants","tx","all","map","restaurant","put","abort","Error","saveReviewsDataLocally","reviews","review","getLocalRestaurantsData","getLocalReviewsData","id","DBHelper","fetch","DATABASE_URL","response","json","err","offlineData","data","headers","Headers","Content-Type","body","JSON","stringify","ok","statusText","text","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","suffix","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","markers","fetchNeighborhoods","fetchCuisines","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","append","fillCuisinesHTML","initMap","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","createRestaurantHTML","addMarkersToMap","li","image","className","setAttribute","imageUrlForRestaurant","alt","address","more","href","marker","mapMarkerForRestaurant","addListener","location"],"mappings":"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","file":"main.min.js","sourcesContent":["// Credits for the lazy loading mechanism go to my colleague Evgeny Kuznetsov https://github.com/Evgeny81\nfunction lazyLoad() {\n    let lazy = document.getElementsByClassName('restaurant-img');\n\n    for(let i=0; i<lazy.length; i++){\n        if(isInViewport(lazy[i]) && lazy[i].hasAttribute('data-src')){\n            lazy[i].src = lazy[i].getAttribute('data-src');\n        }\n    }\n}\n\nfunction registerListener(event, func) {\n    if (window.addEventListener) {\n        window.addEventListener(event, func)\n    } else {\n        window.attachEvent('on' + event, func)\n    }\n}\n\nfunction isInViewport(el){\n    let rect = el.getBoundingClientRect();\n\n    return (\n        rect.bottom >= 0 &&\n        rect.right >= 0 &&\n\n        rect.top <= (\n            window.innerHeight ||\n            document.documentElement.clientHeight) &&\n\n        rect.left <= (\n            window.innerWidth ||\n            document.documentElement.clientWidth)\n    );\n}\n\nregisterListener('load', lazyLoad);\nregisterListener('scroll', lazyLoad);","\nfunction createDB() {\n  return idb.open('restaurants-db', 1, function(upgradeDb) {\n    if (!upgradeDb.objectStoreNames.contains('restaurants')) {\n      upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\n    }\n    if (!upgradeDb.objectStoreNames.contains('reviews')) {\n      const reviewsOS = upgradeDb.createObjectStore('reviews', {keyPath: 'id', autoIncrement: true});\n      reviewsOS.createIndex('restaurant_id', 'restaurant_id', {unique: false});\n    }\n  });\n}\n\nconst restaurantDb = createDB();\n\nfunction saveRestaurantsDataLocally(restaurants) {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('restaurants', 'readwrite');\n    const store = tx.objectStore('restaurants');\n    return Promise.all(restaurants.map(restaurant => store.put(restaurant)))\n      .catch(() => {\n        tx.abort();\n        throw Error('Restaurants not added.');\n      });\n  });\n}\n\nfunction saveReviewsDataLocally(reviews) {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('reviews', 'readwrite');\n    const store = tx.objectStore('reviews');\n    return Promise.all(reviews.map(review => store.put(review)))\n      .catch(() => {\n        tx.abort();\n        throw Error('Reviews not added.');\n      });\n  });\n}\n\nfunction getLocalRestaurantsData() {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('restaurants', 'readonly');\n    const store = tx.objectStore('restaurants');\n    return store.getAll();\n  });\n}\n\nfunction getLocalReviewsData(id) {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('reviews', 'readonly');\n    const store = tx.objectStore('reviews');\n    const index = store.index('restaurant_id');\n    return index.getAll(id);\n  });\n}\n","document.addEventListener('DOMContentLoaded', () => {\n    if(!navigator.serviceWorker) return;\n\n    navigator.serviceWorker.register('/sw.js', {scope: '/'}).then(function(registration) {\n        console.log('Service worker registration succeeded:', registration);\n    }).catch(function(error) {\n        console.log('Service worker registration failed:', error);\n    });\n});","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","/**\n * Common database helper functions.\n */\nclass DBHelper {\n\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   */\n  static get DATABASE_URL() {\n    const port = 1337 // Change this to your server port\n    return `http://localhost:${port}/`;\n  }\n\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    fetch(DBHelper.DATABASE_URL + 'restaurants')\n      .then(response => response.json())\n      .then(restaurants => {\n        saveRestaurantsDataLocally(restaurants);\n        callback(null, restaurants);\n      })\n      .catch(err => {\n        console.log('[DEBUG] Network requests have failed, this is expected if offline');\n        getLocalRestaurantsData()\n          .then(offlineData => {\n            if (!offlineData.length) {\n              console.log(\"no offline data\");\n            } else {\n            callback(null, offlineData);\n          }\n        });\n      });\n  }\n\n  static getReviewsForRestaurant(id, callback) {\n    fetch(DBHelper.DATABASE_URL + 'reviews/?restaurant_id=' + id)\n      .then(response => response.json())\n      .then(reviews => {\n        saveReviewsDataLocally(reviews);\n        callback(reviews);\n      })\n      .catch(err => {\n        console.log('[DEBUG] Network requests have failed, this is expected if offline');\n        getLocalReviewsData(id).then(offlineData => {\n          callback(offlineData);\n        });\n      });\n  }\n  /**\n   * add a review\n   */\n  static reviewRestaurant(data) {\n    const headers = new Headers({'Content-Type': 'application/json'});\n    const body = JSON.stringify(data);\n    return fetch('http://localhost:1337/reviews/', {\n      method: 'POST',\n      headers: headers,\n      body: body\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response.text();\n    });\n  }\n\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        const restaurant = restaurants.find(r => r.id == id);\n        if (restaurant) { // Got the restaurant\n          callback(null, restaurant);\n        } else { // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants\n        if (cuisine != 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(restaurant, suffix = '_800') {\n    return (`/img/${restaurant.id}${suffix}.jpg`);\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP}\n    );\n    return marker;\n  }\n\n}\n","let restaurants,\n  neighborhoods,\n  cuisines, \n  map,\n  markers = [];\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nwindow.fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n}\n\n/**\n * Set neighborhoods HTML.\n */\nwindow.fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n}\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nwindow.fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n}\n\n/**\n * Set cuisines HTML.\n */\nwindow.fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n}\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  updateRestaurants();\n}\n\n/**\n * Update page and map for current restaurants.\n */\nwindow.updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  })\n}\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nwindow.resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n}\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nwindow.fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n}\n\n/**\n * Create restaurant HTML.\n */\nwindow.createRestaurantHTML = (restaurant) => {\n  const li = document.createElement('li');\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  image.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant, '_300'));\n  image.src = '/img/1_300.jpg';\n  image.alt = \"image for \" + restaurant.name;\n  li.append(image);\n\n  const name = document.createElement('h1');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute('aria-label', 'Details for ' + restaurant.name);\n  more.setAttribute('role', 'button');\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  li.append(more)\n\n  return li\n}\n\n/**\n * Add markers for current restaurants to the map.\n */\nwindow.addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url\n    });\n    self.markers.push(marker);\n  });\n}\n"]}