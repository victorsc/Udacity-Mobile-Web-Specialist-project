{"version":3,"sources":["lazy_loading.js","indexeddb.js","idb.js","main.js","dbhelper.js"],"names":["lazyLoad","lazy","document","getElementsByClassName","i","length","isInViewport","hasAttribute","src","getAttribute","registerListener","event","func","window","addEventListener","attachEvent","el","rect","getBoundingClientRect","bottom","right","top","innerHeight","documentElement","clientHeight","left","innerWidth","clientWidth","createDB","idb","open","upgradeDb","oldVersion","objectStoreNames","contains","createObjectStore","keyPath","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","call","callback","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","name","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default","self","restaurantDb","saveRestaurantsDataLocally","restaurants","tx","all","map","restaurant","put","catch","abort","Error","getLocalRestaurantsData","DBHelper","fetch","DATABASE_URL","response","json","err","console","log","offlineData","id","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","suffix","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","markers","fetchNeighborhoods","fetchCuisines","registerServiceWorker","navigator","serviceWorker","register","scope","registration","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","append","fillCuisinesHTML","initMap","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","createRestaurantHTML","addMarkersToMap","li","image","className","setAttribute","imageUrlForRestaurant","alt","address","more","href","marker","mapMarkerForRestaurant","addListener","location"],"mappings":"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","file":"main.min.js","sourcesContent":["function lazyLoad() {\n    let lazy = document.getElementsByClassName('restaurant-img');\n\n    for(let i=0; i<lazy.length; i++){\n        if(isInViewport(lazy[i]) && lazy[i].hasAttribute('data-src')){\n            lazy[i].src = lazy[i].getAttribute('data-src');\n        }\n    }\n}\n\nfunction registerListener(event, func) {\n    if (window.addEventListener) {\n        window.addEventListener(event, func)\n    } else {\n        window.attachEvent('on' + event, func)\n    }\n}\n\nfunction isInViewport(el){\n    let rect = el.getBoundingClientRect();\n\n    return (\n        rect.bottom >= 0 &&\n        rect.right >= 0 &&\n\n        rect.top <= (\n            window.innerHeight ||\n            document.documentElement.clientHeight) &&\n\n        rect.left <= (\n            window.innerWidth ||\n            document.documentElement.clientWidth)\n    );\n}\n\nregisterListener('load', lazyLoad);\nregisterListener('scroll', lazyLoad);","\nfunction createDB() {\n  return idb.open('restaurants-db', 2, function(upgradeDb) {\n    switch (upgradeDb.oldVersion) {\n      case 0:\n        // backup\n      case 1:\n        if (!upgradeDb.objectStoreNames.contains('restaurants')) {\n          upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\n        }\n    }\n  });\n}\n\nconst restaurantDb = createDB();\n\nfunction saveRestaurantsDataLocally(restaurants) {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('restaurants', 'readwrite');\n    const store = tx.objectStore('restaurants');\n    return Promise.all(restaurants.map(restaurant => store.put(restaurant)))\n      .catch(() => {\n        tx.abort();\n        throw Error('Restaurants not added.');\n      });\n  });\n}\n\nfunction getLocalRestaurantsData() {\n  return restaurantDb.then(db => {\n    const tx = db.transaction('restaurants', 'readonly');\n    const store = tx.objectStore('restaurants');\n    return store.getAll();\n  });\n}\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","let restaurants,\n  neighborhoods,\n  cuisines\nvar map\nvar markers = []\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  fetchNeighborhoods();\n  fetchCuisines();\n  registerServiceWorker();\n});\n\n\nwindow.registerServiceWorker = () => {\n  if(!navigator.serviceWorker) return;\n\n  navigator.serviceWorker.register('/sw.js', {scope: '/'}).then(function(registration) {\n    console.log('Service worker registration succeeded:', registration);\n  }).catch(function(error) {\n    console.log('Service worker registration failed:', error);\n  });\n}\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nwindow.fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n}\n\n/**\n * Set neighborhoods HTML.\n */\nwindow.fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n}\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nwindow.fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n}\n\n/**\n * Set cuisines HTML.\n */\nwindow.fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n}\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  updateRestaurants();\n}\n\n/**\n * Update page and map for current restaurants.\n */\nwindow.updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  })\n}\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nwindow.resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n}\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nwindow.fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n}\n\n/**\n * Create restaurant HTML.\n */\nwindow.createRestaurantHTML = (restaurant) => {\n  const li = document.createElement('li');\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  image.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant, '_300'));\n  image.src = '/img/1_300.jpg';\n  image.alt = \"image for \" + restaurant.name;\n  li.append(image);\n\n  const name = document.createElement('h1');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute('aria-label', 'Details for ' + restaurant.name);\n  more.setAttribute('role', 'button');\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  li.append(more)\n\n  return li\n}\n\n/**\n * Add markers for current restaurants to the map.\n */\nwindow.addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url\n    });\n    self.markers.push(marker);\n  });\n}\n","/**\n * Common database helper functions.\n */\nclass DBHelper {\n\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   */\n  static get DATABASE_URL() {\n    const port = 1337 // Change this to your server port\n    return `http://localhost:${port}/restaurants`;\n  }\n\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    fetch(DBHelper.DATABASE_URL)\n      .then(response => response.json())\n      .then(restaurants => {\n        saveRestaurantsDataLocally(restaurants);\n        callback(null, restaurants);\n      })\n      .catch(err => {\n        console.log('[DEBUG] Network requests have failed, this is expected if offline');\n        getLocalRestaurantsData()\n          .then(offlineData => {\n            if (!offlineData.length) {\n              console.log(\"no offline data\");\n            } else {\n            callback(null, offlineData);\n          }\n        });\n      });\n  }\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        const restaurant = restaurants.find(r => r.id == id);\n        if (restaurant) { // Got the restaurant\n          callback(null, restaurant);\n        } else { // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants\n        if (cuisine != 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(restaurant, suffix = '_800') {\n    return (`/img/${restaurant.id}${suffix}.jpg`);\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP}\n    );\n    return marker;\n  }\n\n}\n"]}